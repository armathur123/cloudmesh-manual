:mod:`cloudmesh.aws.compute.AwsFlavors-Gregor`
==============================================

.. py:module:: cloudmesh.aws.compute.AwsFlavors-Gregor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cloudmesh.aws.compute.AwsFlavors-Gregor.AwsImages



.. class:: AwsImages


   Bases: :class:`dict`

   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)

   .. method:: fetch(self)


   .. method:: extract_tables(self, html)


   .. method:: print(self, key=None)


   .. method:: pprint(self, key=None)


   .. method:: keys(self)

      D.keys() -> a set-like object providing a view on D's keys


   .. method:: __getitem__(self, item)

      x.__getitem__(y) <==> x[y]


   .. method:: table(self, key, output='fancy_grid')

      Available formats:

          "df"
          "plain"
          "simple"
          "github"
          "grid"
          "fancy_grid"
          "pipe"
          "orgtbl"
          "jira"
          "presto"
          "psql"
          "rst"
          "mediawiki"
          "moinmoin"
          "youtrack"
          "html"
          "latex"
          "latex_raw"
          "latex_booktabs"
          "textile"

      :param key:
      :param output:
      :return:



.. data:: images
   

   

