:mod:`cloudmesh.shell.shell`
============================

.. py:module:: cloudmesh.shell.shell


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cloudmesh.shell.shell.Plugin
   cloudmesh.shell.shell.CMShell



Functions
~~~~~~~~~

.. autoapisummary::

   cloudmesh.shell.shell.iter_namespace
   cloudmesh.shell.shell.import_class
   cloudmesh.shell.shell.get_class
   cloudmesh.shell.shell.main


.. function:: iter_namespace(ns_pkg)


.. function:: import_class(cl)


.. function:: get_class(str)


.. class:: Plugin

   Bases: :class:`object`

   Some simple methods to manage dynamic namespace plugins for cloudmesh.

   .. method:: list()
      :staticmethod:


   .. method:: modules(cls)
      :classmethod:

      list of cloudmesh modules in the cloudmesh namespace
      :return: list of modules


   .. method:: classes(cls)
      :classmethod:

      list of the commands in the cloudmesh namespace under cloudmesh.command

      :return: list of the commands


   .. method:: name(cls, command)
      :classmethod:

      creates a name for a modules starting with do_
      :param command: returns a tuple with the module location and tge do_function
      :return:


   .. method:: class_name(cls, command)
      :classmethod:

      creates the default filename in which the module is defined
      :param command:  the name of the command
      :return: cloudmesh.ext.command.<command>+command.<Command>


   .. method:: load(cls, commands=None)
      :classmethod:

      :param commands: If None the commands will be found from import cloudmesh
                       Otherwise the commands can be explicitly specified with

                        commands = [
                          'cloudmesh.bar.command.bar.BarCommand',
                          'cloudmesh.foo.command.foo.FooCommand',
                          ]
                        A namespace package must exists. Foo and Bar ar just examples

      :return: the classes of the command



.. data:: selective_loading
   :annotation: = True

   

.. data:: name
   

   

.. data:: PluginCommandClasses
   

   

.. class:: CMShell(completekey='tab', stdin=None, stdout=None)


   Bases: :class:`cmd.Cmd`, :class:`PluginCommandClasses`

   The command shell that inherits all commands from PluginCommand

   .. attribute:: prompt
      :annotation: = cms> 

      

   .. attribute:: banner
      

      

   .. attribute:: do_q
      

      

   .. method:: set_debug(self, on)


   .. method:: do_commands(self, args, arguments)

      ::

      Usage:
            commands


   .. method:: precmd(self, line)

      Hook method executed just before the command line is
      interpreted, but after the input prompt is generated and issued.


   .. method:: postcmd(self, stop, line)

      Hook method executed just after a command dispatch is finished.


   .. method:: replace_vars(self, line)


   .. method:: onecmd(self, line)

      Interpret the argument as though it had been typed in response
      to the prompt.

      This may be overridden, but should not normally need to be;
      see the precmd() and postcmd() methods for useful execution hooks.
      The return value is a flag indicating whether interpretation of
      commands by the interpreter should stop.


   .. method:: do_py(self, args, arguments)

      ::

      Usage:
           py PROGRAM...

       Arguments:
           PROGRAM...  the command to be executed

      Description:
           py PROGRAM...  executes the command


   .. method:: do_shell(self, args, arguments)

      ::

      Usage:
           shell COMMAND

       Arguments:
           COMMAND  the command to be executed

      Description:
           shell COMMAND  executes the command


   .. method:: do_help(self, arg)

      ::

      Usage:
          help
          help COMMAND

      Description:
          List available commands with "help" or detailed help with
          "help COMMAND".

          In addition to the commands it also allows to print the api.
          The classes that help is available for can be listed with

              cms info


   .. method:: help_help(self)

      ::

      Usage:
          help
          help COMMAND

      Description:
          List available commands with "help" or detailed help with
          "help COMMAND".


   .. method:: do_info(self, args, arguments)

      ::

      Usage:
        info path
        info commands
        info files [errors] [--output=FORMAT]
        info cloudmesh
        info errors [--trace]
        info sys [KEYWORD] [--plugins] [--output=FORMAT]
        info

      Options:
        --format=FORMAT  the format to print the versions in [default: table]

      Description:

        info
            provides internal info about the shell and its packages

        The format option only works for

            cms info files


   .. method:: preloop(self)

      adds the banner to the preloop


   .. method:: do_EOF(self, args)

      ::

      Usage:
        EOF

      Description:
        Command to the shell to terminate reading a script.


   .. method:: do_quit(self, args)

      ::

      Usage:
        quit

      Description:
        Action to be performed when quit is typed


   .. method:: emptyline(self)

      Called when an empty line is entered in response to the prompt.

      If this method is not overridden, it repeats the last nonempty
      command entered.


   .. method:: do_version(self, args, arguments)

      ::

      Usage:
        version pip [PACKAGE]
        version [--format=FORMAT] [--check=CHECK] [--number]

      Options:
        --format=FORMAT  the format to print the versions in [default: table]
        --check=CHECK    boolean tp conduct an additional check [default: True]

      Description:
        version
            Prints out the version number
        version pip
            Prints the contents of pip list

      Limitations:
        Package names must not have a . in them instead you need to use -
        Thus to query for cloudmesh-cmd5 use

          cms version pip cloudmesh-cmd5



.. function:: main()

   cms.

   Usage:
     cms --help
     cms [--echo] [--debug] [--nosplash] [-i] [COMMAND ...]

   Arguments:
     COMMAND                  A command to be executed

   Options:
     --file=SCRIPT  -f  SCRIPT  Executes the script
     -i                 After start keep the shell interactive,
                        otherwise quit [default: False]
     --nosplash    do not show the banner [default: False]


